<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>观鱼入知命</title>
  
  <subtitle>我会忍受所有的寂寞,也会感叹时光的蹉跎。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-06T09:30:35.376Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>丘山士心平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>quartz定时任务</title>
    <link href="http://yoursite.com/2020/07/06/quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/07/06/quartz定时任务/</id>
    <published>2020-07-06T11:57:10.000Z</published>
    <updated>2020-07-06T09:30:35.376Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="quartz" scheme="http://yoursite.com/categories/quartz/"/>
    
    
      <category term="定时任务" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>post请求url中https报错问题</title>
    <link href="http://yoursite.com/2020/07/05/post%E8%AF%B7%E6%B1%82url%E4%B8%ADhttps%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/05/post请求url中https报错问题/</id>
    <published>2020-07-05T11:57:10.000Z</published>
    <updated>2020-07-06T09:30:20.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li>异常日志<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException:</span><br><span class="line">    Caused by: java.security.cert.CertificateException: No subject alternative names present</span><br><span class="line">        at sun.security.util.HostnameChecker.matchIP(Unknown Source)</span><br><span class="line">        at sun.security.util.HostnameChecker.match(Unknown Source)</span><br><span class="line">at sun.security.ssl.X509TrustManagerImpl.checkIdentity(Unknown Source)</span><br><span class="line">at sun.security.ssl.X509TrustManagerImpl.checkIdentity(Unknown Source)</span><br><span class="line">at sun.security.ssl.X509TrustManagerImpl.checkTrusted(Unknown Source)</span><br><span class="line">at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(Unknown Source)</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>解决方案<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class SslHandshakeExc_NsanPresent&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"> </span><br><span class="line">URL url = new URL(&quot;https://192.168.2.222:8443/wbsystem/login.jsp&quot;);</span><br><span class="line"> </span><br><span class="line">// 新增部分</span><br><span class="line">SSLContext sc = SSLContext.getInstance(&quot;TLS&quot;);</span><br><span class="line">sc.init(null, trustAllCerts, null);</span><br><span class="line">HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());</span><br><span class="line"> </span><br><span class="line">HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line"> </span><br><span class="line">// 新增部分</span><br><span class="line">conn.setHostnameVerifier(new Servlet_test().new TrustAnyHostnameVerifier());</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 定制Trust</span><br><span class="line">static TrustManager[] trustAllCerts = new TrustManager[] &#123; new X509TrustManager() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)</span><br><span class="line">throws CertificateException &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)</span><br><span class="line">throws CertificateException &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; &#125;;</span><br><span class="line"> </span><br><span class="line">// 定制Verifier</span><br><span class="line">public class TrustAnyHostnameVerifier implements HostnameVerifier &#123;</span><br><span class="line"></span><br><span class="line">public boolean verify(String hostname, SSLSession session) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;异常日志&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javax.net.ssl.SSLHandshakeException:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Caused by: java.security.cert.CertificateException: No subject alternative names present&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at sun.security.util.HostnameChecker.matchIP(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at sun.security.util.HostnameChecker.match(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at sun.security.ssl.X509TrustManagerImpl.checkIdentity(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at sun.security.ssl.X509TrustManagerImpl.checkIdentity(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(Unknown Source)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="http请求" scheme="http://yoursite.com/categories/http%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Java是按值传递还是按引用传递</title>
    <link href="http://yoursite.com/2020/07/03/Java%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>http://yoursite.com/2020/07/03/Java是按值传递还是按引用传递/</id>
    <published>2020-07-03T11:57:10.000Z</published>
    <updated>2020-07-03T08:16:15.263Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在开始之前，我们先理解按值传递、按引用传递的概念。</li></ul><p>1、什么是值传递？<br>指的是在方法调用时，传递的参数是按值的拷贝传递。按值传递重要特点：传递的是值的拷贝，也就是说传递后就互不相关了，每个值都对应到一个地址空间。</p><p>2、什么是引用传递<br>指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。</p><a id="more"></a><p>明确地说，java都是按值传递的！java的世界里，都是按值传递。其实按值、按引用都只是个概念，关键是我们如何去理解java传参的本质。</p><p>下面就结合一个例子来说，有些情况下，所传参数的值，是个“引用”，这一点容易让人产生困惑。</p><p>请看下面的例子<br>首先有如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog myDog = new Dog(&quot;Rover&quot;);</span><br><span class="line">foo(myDog);</span><br></pre></td></tr></table></figure><p>这时，你传给了foo函数一个参数，这个参数值，是个引用，也就是Rover这只dog的内存地址（这只是粗略的说明，因为在java中，这个地址并非是真正的地址）<br>假设这时候Rover的地址是42，那么，我们就是传了42这个地址给foo方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void foo(Dog someDog) &#123;</span><br><span class="line">    someDog.setName(&quot;Max&quot;);     // AAA</span><br><span class="line">    someDog = new Dog(&quot;Fifi&quot;);  // BBB</span><br><span class="line">    someDog.setName(&quot;Rowlf&quot;);   // CCC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们逐步解析foo方法</p><p>1.参数 someDog的值是一个地址（42）</p><p>2.在AAA这一行：<br>someDog，也就是函数外声明的myDog，name从Rover被改成了Max</p><p>3.在BBB这一行：<br>这就是关键的地方了，又new了一只dog，new 意味着又在新的地址空间放上了一只Dog，我们假设其地址是74。这时，someDog的值，会从42变成了74</p><p>4.在CCC这一行：<br>这时候的修改，是对内存地址为74的那只狗的修改，而非原先的42</p><p>从这个例子，我们可以看到，foo方法的参数someDog，它是一个值，而非引用。如果它是引用，那么在foo方法内部的修改（包括BBB、CCC这两行），都应该会对42地址空间的dog产生影响，也就是方法外的参数，mydog也会指向新的地址空间。</p><p>不细究概念了，再总结下Java初学者容易犯错的地方：<br>假如你想像例子一样，传递一个对象到一个方法中，并由该方法修改对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object a = new Object();</span><br><span class="line">foo(a);//在方法内部修改a的属性值</span><br><span class="line">return a;//希望此时的a已经是修改后的值</span><br></pre></td></tr></table></figure><p>要切记，这个Objct一定要在调用方法前，就初始化好（new一个），然后再作为参数传进去，并且在方法中不能再初始化这个参数。这样，在方法中对该参数的修改，才会有效。</p><p>[stackoverflow链接]<br><a href="http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="noopener">http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在开始之前，我们先理解按值传递、按引用传递的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、什么是值传递？&lt;br&gt;指的是在方法调用时，传递的参数是按值的拷贝传递。按值传递重要特点：传递的是值的拷贝，也就是说传递后就互不相关了，每个值都对应到一个地址空间。&lt;/p&gt;
&lt;p&gt;2、什么是引用传递&lt;br&gt;指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java时间转换</title>
    <link href="http://yoursite.com/2020/06/30/Java%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/06/30/Java时间转换/</id>
    <published>2020-06-30T11:57:10.000Z</published>
    <updated>2020-07-03T09:07:52.141Z</updated>
    
    <content type="html"><![CDATA[<ul><li>时间字符串和时间转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 把时间转换为字符串</span><br><span class="line">DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">Date date = new Date(136464513123L);</span><br><span class="line">String string = dateFormat.format(date);</span><br><span class="line">System.out.println(string);</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">// 把字符串转化为时间</span><br><span class="line">String string = &quot;2018-07-19&quot;;</span><br><span class="line">DateFormat dateFormat = new SimpleDateFormat (&quot;yyyy-MM-dd&quot;);// 这里要与时间字符串的格式一样即可，否则报错</span><br><span class="line">Date date = dateFormat.parse(string);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//默认输出格式</span><br><span class="line">Date date=new Date();</span><br><span class="line">System.out.println(date);//Fri Oct 27 16:56:37 CST 2017</span><br><span class="line">//日期格式化显示，首先定义格式</span><br><span class="line">SimpleDateFormat sdf1=new SimpleDateFormat(&quot;yyyyMMdd&quot;);//显示20171027格式</span><br><span class="line">SimpleDateFormat sdf2=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);//显示2017-10-27格式</span><br><span class="line">SimpleDateFormat sdf3=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);//显示2017-10-27 10:00:00格式</span><br><span class="line">SimpleDateFormat sdf4=new SimpleDateFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;);//显示2017年10月27日10时00分00秒格式</span><br><span class="line">//将格式应用于日期</span><br><span class="line">System.out.println(sdf1.format(date));//20171027</span><br><span class="line">System.out.println(sdf2.format(date));//2017-10-27</span><br><span class="line">System.out.println(sdf3.format(date));//2017-10-27 17:11:13</span><br><span class="line">System.out.println(sdf4.format(date));//2017年10月27日17时11分13秒</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;时间字符串和时间转换&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 把时间转换为字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DateFormat dateFormat = new SimpleDateFormat(&amp;quot;yyyy-MM-dd hh:mm:ss&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date date = new Date(136464513123L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String string = dateFormat.format(date);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 把字符串转化为时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String string = &amp;quot;2018-07-19&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DateFormat dateFormat = new SimpleDateFormat (&amp;quot;yyyy-MM-dd&amp;quot;);// 这里要与时间字符串的格式一样即可，否则报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date date = dateFormat.parse(string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(date);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>tiny-spring笔记一</title>
    <link href="http://yoursite.com/2020/05/29/tiny-spring%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2020/05/29/tiny-spring笔记一/</id>
    <published>2020-05-29T11:57:10.000Z</published>
    <updated>2020-06-01T01:33:33.985Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-step1-最基本的容器"><a href="#1-step1-最基本的容器" class="headerlink" title="1.step1 - 最基本的容器"></a>1.step1 - 最基本的容器</h4><p>使用如下命令在idea中查看最开始的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout step-1-container-register-and-get</span><br></pre></td></tr></table></figure><p>代码结构如下图所示<br><img src="/2020/05/29/tiny-spring笔记一/aaa.png" alt><br>IoC 最基本的角色有两个：容器 (BeanFactory) 和 Bean 本身。这里使用 BeanDefinition 来封装了 bean 对象(当前之后bean属性)，这样可以保存一些额外的元信息。</p><a id="more"></a><h4 id="2-step2-将-bean-创建放入工厂"><a href="#2-step2-将-bean-创建放入工厂" class="headerlink" title="2.step2 - 将 bean 创建放入工厂"></a>2.step2 - 将 bean 创建放入工厂</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout step-2-abstract-beanfactory-and-do-bean-initilizing-in-it</span><br></pre></td></tr></table></figure><p>代码结构如下<br><img src="/2020/05/29/tiny-spring笔记一/bbb.png" alt><br>step1 中的 bean 是初始化好之后再 set 进去的，实际使用中，我们希望容器来管理 bean 的创建。于是我们将 bean 的初始化放入 BeanFactory 中。为了保证扩展性，我们使用 Extract Interface 的方法，将 BeanFactory 替换成接口，而使用 AbstractBeanFactory 和 AutowireCapableBeanFactory 作为其实现。”AutowireCapable” 的意思是 “可自动装配的”，为我们后面注入属性做准备。step2和step1创建bean的方式不同，step2的方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object bean = beanDefinition.getBeanClass().newInstance();</span><br><span class="line">注意newInstance和new的区别</span><br></pre></td></tr></table></figure><h4 id="3-step3-为-bean-注入属性"><a href="#3-step3-为-bean-注入属性" class="headerlink" title="3.step3 - 为 bean 注入属性"></a>3.step3 - 为 bean 注入属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout step-3-inject-bean-with-property</span><br></pre></td></tr></table></figure><p>代码结构如下<br><img src="/2020/05/29/tiny-spring笔记一/ccc.png" alt><br><img src="/2020/05/29/tiny-spring笔记一/ddd.png" alt><br>这一步，我们想要为 bean 注入属性。我们选择将属性注入信息保存成 PropertyValue 对象，并且保存到 BeanDefinition 中。这样在初始化 bean 的时候，我们就可以根据 PropertyValue 来进行 bean 属性的注入。Spring 本身使用了 setter 来进行注入，这里为了代码简洁，我们使用 Field 的形式来注入。</p><h4 id="4-step4-读取-xml-配置来初始化-bean"><a href="#4-step4-读取-xml-配置来初始化-bean" class="headerlink" title="4.step4 - 读取 xml 配置来初始化 bean"></a>4.step4 - 读取 xml 配置来初始化 bean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout step-4-config-beanfactory-with-xml</span><br></pre></td></tr></table></figure><p>代码结构如下<br><img src="/2020/05/29/tiny-spring笔记一/eee.png" alt></p><h4 id="5-step5-为-bean-注入-bean"><a href="#5-step5-为-bean-注入-bean" class="headerlink" title="5.step5 - 为 bean 注入 bean"></a>5.step5 - 为 bean 注入 bean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout step-5-inject-bean-to-bean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-step1-最基本的容器&quot;&gt;&lt;a href=&quot;#1-step1-最基本的容器&quot; class=&quot;headerlink&quot; title=&quot;1.step1 - 最基本的容器&quot;&gt;&lt;/a&gt;1.step1 - 最基本的容器&lt;/h4&gt;&lt;p&gt;使用如下命令在idea中查看最开始的版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout step-1-container-register-and-get&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代码结构如下图所示&lt;br&gt;&lt;img src=&quot;/2020/05/29/tiny-spring笔记一/aaa.png&quot; alt&gt;&lt;br&gt;IoC 最基本的角色有两个：容器 (BeanFactory) 和 Bean 本身。这里使用 BeanDefinition 来封装了 bean 对象(当前之后bean属性)，这样可以保存一些额外的元信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring、Java" scheme="http://yoursite.com/categories/Spring%E3%80%81Java/"/>
    
    
      <category term="Spring、Java、Ioc" scheme="http://yoursite.com/tags/Spring%E3%80%81Java%E3%80%81Ioc/"/>
    
  </entry>
  
  <entry>
    <title>接口Iterator和接口Iterable的区别</title>
    <link href="http://yoursite.com/2020/05/26/%E6%8E%A5%E5%8F%A3%20Iterator%20%E5%92%8C%E6%8E%A5%E5%8F%A3%20Iterable%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/05/26/接口 Iterator 和接口 Iterable 的区别/</id>
    <published>2020-05-26T11:57:10.000Z</published>
    <updated>2020-05-26T02:06:02.786Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Iterable-接口"><a href="#Iterable-接口" class="headerlink" title="Iterable 接口"></a>Iterable 接口</h4><ul><li>内置了 iterator 方法顺序遍历数据源返回值 Iterator 接口</li><li>jdk8 增加了 forEach 方法返回 void</li><li>Set、List 都要实现 Iterable 接口，基本上使用迭代器都要实现该接口</li></ul><p>Iterable 的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterable&lt;T&gt; &#123;</span><br><span class="line">    Iterator&lt;T&gt; iterator();</span><br><span class="line"></span><br><span class="line">    default void forEach(Consumer&lt;? super T&gt; action) &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        for (T t : this) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    default Spliterator&lt;T&gt; spliterator() &#123;</span><br><span class="line">        return Spliterators.spliteratorUnknownSize(iterator(), 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Iterator-和-ListIterator-主要区别有："><a href="#Iterator-和-ListIterator-主要区别有：" class="headerlink" title="Iterator 和 ListIterator 主要区别有："></a>Iterator 和 ListIterator 主要区别有：</h4><ul><li>ListIterator 有 add () 方法，可以向 List 中添加对象；而 Iterator 不能</li><li>ListIterator 和 Iterator 都有 hasNext () 和 next () 方法，可以实现顺序向后遍历。ListIterator 有 hasPrevious () 和 previous () 方法，可以实现逆向（顺序向前）遍历。Iterator 就不可以。</li><li>ListIterator 可以定位当前的索引位置，nextIndex () 和 previousIndex () 可以实现。Iterator 没有此功能。</li><li>都可实现删除对象，但是 ListIterator 可以实现对象的修改，set () 方法可以实现。Iterator 仅能遍历，不能修改。因为 ListIterator 的这些功能，可以实现对 LinkedList 等 List 数据结构的操作。</li></ul><h4 id="Iterator-接口"><a href="#Iterator-接口" class="headerlink" title="Iterator 接口"></a>Iterator 接口</h4><ul><li>出现 Iterator 是为了解决遍历集合时，避免我们在操作集合的时候必须要根据集合内部结构来选择我们应该如何遍历，因此把 Iterator 抽象出来</li></ul><p>Iterator 的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterator&lt;E&gt; &#123;</span><br><span class="line">    boolean hasNext();</span><br><span class="line"></span><br><span class="line">    E next();</span><br><span class="line"></span><br><span class="line">    default void remove() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;remove&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    default void forEachRemaining(Consumer&lt;? super E&gt; action) &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        while (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterable-接口和-Iterator-接口"><a href="#Iterable-接口和-Iterator-接口" class="headerlink" title="Iterable 接口和 Iterator 接口"></a>Iterable 接口和 Iterator 接口</h4><blockquote><p>这两个都是迭代相关的接口，可以这么认为，实现了 Iterable 接口，则表示某个对象是可被迭代的；Iterator 接口相当于是一个迭代器，实现了 Iterator 接口，等于具体定义了这个可被迭代的对象时如何进行迭代的。一般 Iterable 和 Iterator 接口都是结合着一起使用的。</p></blockquote><h4 id="为什么一定要实现-Iterable-接口而不直接实现-Iterator-接口了呢"><a href="#为什么一定要实现-Iterable-接口而不直接实现-Iterator-接口了呢" class="headerlink" title="为什么一定要实现 Iterable 接口而不直接实现 Iterator 接口了呢?"></a>为什么一定要实现 Iterable 接口而不直接实现 Iterator 接口了呢?</h4><blockquote><p>因为 Iterator 接口的核心方法 next () 或者 hasNext () 都是依赖于迭代器的当前迭代位置的。如果 Collection 直接实现 Iterator 接口，势必导致集合对象中包含当前迭代位置的数据，当集合在不同方法间被传递时，由于当前迭代位置不可预置，那么 next () 方法的结果会变成不可预知的。除非再为 Iterator 接口添加一个 reset () 方法，用来重置当前迭代位置。但即使这样，Collection 也同时只能存在一个当前迭代位置。而 Iterable，每次调用都返回一个从头开始计数的迭代器，多个迭代器时互不干扰.</p></blockquote><p>可能这么解释不是很明白，再解释明白一点，我自己写的一个 ArrayList，如果直接实现 Iterator 接口，那么势必是这么写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; implements List&lt;E&gt;, Iterator&lt;E&gt;, RandomAccess, Cloneable, Serializable&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 序列化ID</span><br><span class="line">     */</span><br><span class="line">    private static final long serialVersionUID = -5786598508477165970L;</span><br><span class="line">    </span><br><span class="line">    private int size = 0;</span><br><span class="line">    private transient Object[] elementData = null;</span><br><span class="line">    </span><br><span class="line">    public E next()</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean hasNext()</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么问题就来了，如果一个 ArrayList 实例被多个地方迭代，next () 方法、hasNext () 直接操作的是 ArrayList 中的资源，假如我在 ArrayList 中定义一个迭代位置的变量，那么对于不同调用处，这个迭代变量是共享的，线程 A 迭代的时候将迭代变量设置成了第 5 个位置，这时候切换到了线程 B，对于线程 B 来讲，就从第 5 个位置开始遍历此 ArrayList 了，根本不是从 0 开始，如何正确迭代？</p><p>实现 Iterable 接口返回一个 Iterator 接口的实例就不一样了，我为自己写的 ArrayList 定义一个内部类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayListIterator implements Iterator&lt;E&gt;&#123;</span><br><span class="line">    int iteratorPostion = 0;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 判断是否后面还有元素</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean hasNext()</span><br><span class="line">    &#123;</span><br><span class="line">        if ((iteratorPostion + 1) &gt; size)</span><br><span class="line">            return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回之前一个元素的引用</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public E next()</span><br><span class="line">    &#123;</span><br><span class="line">        return (E)elementData[iteratorPostion++];</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次都返回一个返回一个 ArrayListIterator 实例出去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回一个ArrayList的迭代器，可以通过该迭代器遍历ArrayList中的元素</span><br><span class="line"> */</span><br><span class="line">public Iterator&lt;E&gt; iterator()</span><br><span class="line">&#123;</span><br><span class="line">    return new ArrayListIterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就保证了，即使是多处同时迭代这个 ArrayList，依然每处都是从 0 开始迭代这个 ArrayList 实例的。</p><h4 id="深入探讨-Iterable-与-Iterator-关系"><a href="#深入探讨-Iterable-与-Iterator-关系" class="headerlink" title="深入探讨 Iterable 与 Iterator 关系"></a>深入探讨 Iterable 与 Iterator 关系</h4><p>有一个问题，为什么不直接将 hasNext ()，next () 方法放在 Iterable 接口中，其他类直接实现就可以了？</p><p>原因是有些集合类可能不止一种遍历方式，实现了 Iterable 的类可以再实现多个 Iterator 内部类，例如 LinkedList 中的 ListItr 和 DescendingIterator 两个内部类，就分别实现了双向遍历和逆序遍历。通过返回不同的 Iterator 实现不同的遍历方式，这样更加灵活。如果把两个接口合并，就没法返回不同的 Iterator 实现类了。ListItr 相关源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public ListIterator&lt;E&gt; listIterator(int index) &#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        return new ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class ListItr implements ListIterator&lt;E&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">        ListItr(int index) &#123;</span><br><span class="line">            // assert isPositionIndex(index);</span><br><span class="line">            next = (index == size) ? null : node(index);</span><br><span class="line">            nextIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return nextIndex &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>如上所示可以通过调用 list.listIterator() 方法返回 iterator 迭代器（list.iterator() 只是其默认实现）</p><p>DescendingIterator 源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; descendingIterator() &#123;</span><br><span class="line">        return new DescendingIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    private class DescendingIterator implements Iterator&lt;E&gt;     &#123;</span><br><span class="line">        private final ListItr itr = new ListItr(size());</span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return itr.hasPrevious();</span><br><span class="line">        &#125;</span><br><span class="line">        public E next() &#123;</span><br><span class="line">            return itr.previous();</span><br><span class="line">        &#125;</span><br><span class="line">        public void remove() &#123;</span><br><span class="line">            itr.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样可以通过 list.descendingIterator() 使用该迭代器。</p><p>[参考链接]<a href="https://segmentfault.com/a/1190000020642743" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020642743</a><br>[参考链接]<a href="https://www.cnblogs.com/xrq730/p/4907184.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/4907184.html</a><br>[参考链接]<a href="https://zhuanlan.zhihu.com/p/52366312" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52366312</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Iterable-接口&quot;&gt;&lt;a href=&quot;#Iterable-接口&quot; class=&quot;headerlink&quot; title=&quot;Iterable 接口&quot;&gt;&lt;/a&gt;Iterable 接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;内置了 iterator 方法顺序遍历数据源返回值 Iterator 接口&lt;/li&gt;
&lt;li&gt;jdk8 增加了 forEach 方法返回 void&lt;/li&gt;
&lt;li&gt;Set、List 都要实现 Iterable 接口，基本上使用迭代器都要实现该接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Iterable 的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Iterable&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Iterator&amp;lt;T&amp;gt; iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default void forEach(Consumer&amp;lt;? super T&amp;gt; action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Objects.requireNonNull(action);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (T t : this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            action.accept(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default Spliterator&amp;lt;T&amp;gt; spliterator() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return Spliterators.spliteratorUnknownSize(iterator(), 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="http://yoursite.com/2020/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/25/设计模式之迭代器模式/</id>
    <published>2020-05-25T11:57:10.000Z</published>
    <updated>2020-05-27T02:22:59.056Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器模式定义"><a href="#迭代器模式定义" class="headerlink" title="迭代器模式定义"></a>迭代器模式定义</h4><blockquote><p>迭代器模式（Iterator），提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。</p></blockquote><h4 id="迭代器模式的优点有"><a href="#迭代器模式的优点有" class="headerlink" title="迭代器模式的优点有"></a>迭代器模式的优点有</h4><blockquote><p>简化了遍历方式，对于对象集合的遍历，还是比较麻烦的，对于数组或者有序列表，我们尚可以通过游标来取得，但用户需要在对集合了解很清楚的前提下，自行遍历对象，但是对于 hash 表来说，用户遍历起来就比较麻烦了。而引入了迭代器方法后，用户用起来就简单的多了。<br>可以提供多种遍历方式，比如说对有序列表，我们可以根据需要提供正序遍历，倒序遍历两种迭代器，用户用起来只需要得到我们实现好的迭代器，就可以方便的对集合进行遍历了。<br>封装性良好，用户只需要得到迭代器就可以遍历，而对于遍历算法则不用去关心。</p></blockquote><h4 id="迭代器模式的缺点"><a href="#迭代器模式的缺点" class="headerlink" title="迭代器模式的缺点"></a>迭代器模式的缺点</h4><blockquote><p>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像 ArrayList，我们宁可愿意使用 for 循环和 get 方法来遍历集合。</p></blockquote><a id="more"></a><h4 id="继承关系图"><a href="#继承关系图" class="headerlink" title="继承关系图"></a>继承关系图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">此处以ArrayList为例</span><br><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;...&#125;</span><br><span class="line"></span><br><span class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;...&#125;</span><br><span class="line"></span><br><span class="line">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterable&lt;T&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Returns an iterator over elements of type &#123;@code T&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @return an Iterator.</span><br><span class="line">     */</span><br><span class="line">    Iterator&lt;T&gt; iterator();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return new Itr();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">        int cursor;       // index of next element to return</span><br><span class="line">        int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class="line">        int expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public E next() &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            int i = cursor;</span><br><span class="line">            if (i &gt;= size)</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">            if (i &gt;= elementData.length)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            cursor = i + 1;</span><br><span class="line">            return (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;迭代器模式定义&quot;&gt;&lt;a href=&quot;#迭代器模式定义&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式定义&quot;&gt;&lt;/a&gt;迭代器模式定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;迭代器模式（Iterator），提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;迭代器模式的优点有&quot;&gt;&lt;a href=&quot;#迭代器模式的优点有&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式的优点有&quot;&gt;&lt;/a&gt;迭代器模式的优点有&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;简化了遍历方式，对于对象集合的遍历，还是比较麻烦的，对于数组或者有序列表，我们尚可以通过游标来取得，但用户需要在对集合了解很清楚的前提下，自行遍历对象，但是对于 hash 表来说，用户遍历起来就比较麻烦了。而引入了迭代器方法后，用户用起来就简单的多了。&lt;br&gt;可以提供多种遍历方式，比如说对有序列表，我们可以根据需要提供正序遍历，倒序遍历两种迭代器，用户用起来只需要得到我们实现好的迭代器，就可以方便的对集合进行遍历了。&lt;br&gt;封装性良好，用户只需要得到迭代器就可以遍历，而对于遍历算法则不用去关心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;迭代器模式的缺点&quot;&gt;&lt;a href=&quot;#迭代器模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式的缺点&quot;&gt;&lt;/a&gt;迭代器模式的缺点&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像 ArrayList，我们宁可愿意使用 for 循环和 get 方法来遍历集合。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="迭代器模式" scheme="http://yoursite.com/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>程序员英语</title>
    <link href="http://yoursite.com/2020/05/24/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8B%B1%E8%AF%AD/"/>
    <id>http://yoursite.com/2020/05/24/程序员英语/</id>
    <published>2020-05-24T11:57:10.000Z</published>
    <updated>2020-05-25T02:21:37.273Z</updated>
    
    <content type="html"><![CDATA[<p>contents<br>prevVolume<br>Sub<br>Invalid<br>calculate<br>Failed<br>claas<br>Prefix<br>Index<br>lite</p><a id="more"></a><p>export<br>Volume<br>WithDetailsException<br>Fair<br>Add<br>compiled<br>Configuration<br>This<br>Fair<br>suitable<br>illegal<br>License<br>focus<br>Traceback<br>Organization<br>org.apache.hadoop.hbase.DoNotRetryIOException:<br>omitted<br>cheat<br>find<br>constraint<br>reign<br>Duplicated<br>previous<br>swap<br>SpiritSoft<br>cause<br>Cronos<br>fetchMetadata:<br>prev<br>merge<br>This<br>element<br>Lists<br>fixes<br>Storage<br>Error<br>Nov<br>Service<br>early<br>Error<br>Required<br>priority<br>Provided<br>smart<br>theme<br>Returns<br>The<br>chat<br>quick<br>ObjectStore#listVolumesByUser<br>java.sql.SQLException:<br>park<br>his<br>attaching<br>Design<br>trim<br>操作<br>While<br>租户<br>omitted<br>relative<br>Jul<br>staff<br>Caused<br>hold<br>Removed<br>drill<br>reentrantlock<br>omitted<br>delimited<br>Goal<br>exhausted<br>all<br>Currently<br>Unnecessary<br>If<br>already<br>Exclusive<br>dry<br>Service<br>Copyright<br>fulfil<br>Implementation<br>spawn<br>String<br>Notifications<br>Categories<br>Array<br>Offload<br>ANTLR<br>folders<br>All<br>conflict<br>defer<br>good<br>tenement<br>hints<br>Volumes<br>interceptor<br>foundation<br>timeout<br>drainTo<br>Untracked<br>Incompatible<br>ExhaustedWithDetailsException<br>Base<br>call<br>async<br>Copyright<br>CodisLabs<br>quota<br>absent<br>merchant<br>retries<br>folded<br>Maximum<br>federation<br>annotation<br>through<br>Duplicated<br>Leaving<br>error:<br>Carlier<br>label<br>visited<br>joker<br>accessed<br>IllegalAccess<br>TREEIFY<br>volumes<br>Full<br>logic<br>line<br>coursera<br>dequeue<br>calculateSize<br>Please<br>Descripto<br>getTenantId()<br>When<br>entered<br>Duplicated<br>SpiritSoft<br>Returns<br>ant<br>unnecessary<br>RetriesExhaustedWithDetailsException<br>remainder<br>leetcode-cn<br>claas<br>Pochmann<br>Copyright<br>invalisd<br>操作中不包含上传下载<br>Coursera<br>Lists<br>leetcode-cn<br>Melancholy<br>serviceType<br>abnormally<br>Maximum<br>Annotationsare<br>redundant<br>Oracle<br>Required<br>Quota<br>Error<br>Configuration<br>Size<br>public<br>explicit<br>Size<br>aym<br>Race<br>Annotations<br>Invalid<br>section<br>Timestamp<br>percentage<br>String<br>Red<br>Copyright<br>visible<br>transfer<br>Data<br>Medium<br>It<br>decompression<br>one<br>fix<br>untracked<br>proxy<br>delay<br>Currently<br>Framework<br>IntelliJ<br>Returns<br>large<br>tracking<br>Xiaoyu<br>Returns<br>sign<br>authored<br>Fair<br>drill<br>metadata<br>aNode:<br>starting<br>Only<br>prevVolume<br>terminator<br>one<br>volumePrefix<br>enqueue<br>repository<br>GLOBALS<br>review<br>inclusive<br>goal<br>Incompatible<br>columns<br>distribution<br>Volume<br>Creates<br>leaf<br>expect<br>call<br>Page<br>Authorize<br>call<br>Inc<br>recovery<br>Returns<br>omitted<br>Gets<br>object<br>accessible<br>Shutdown<br>truncated<br>IllegalAccessError<br>replicated<br>discuss<br>BaseContextHandler<br>This<br>enumeration<br>set<br>passing<br>chunkSize<br>multiple<br>undeclared<br>genericwildcard<br>remix<br>recursive<br>relaunch<br>avail<br>SafeModePrecheck<br>With<br>Deprecated<br>IllegalAcc<br>Gets<br>fatal:<br>automatic<br>Subcommand<br>iterable<br>Lombok<br>Block<br>gener<br>unindent<br>Run<br>renderer<br>found<br>desired<br>Sets<br>Allows<br>creation<br>Searched<br>initiate<br>Demons<br>ozone<br>generic<br>fully<br>Removedundeclared<br>jcenter<br>ceiver<br>set<br>survive<br>unpacking<br>system<br>memoized<br>Receiving<br>Ozone<br>recon<br>bucket<br>right<br>correctly<br>company<br>memoizedIsInitialized<br>qualified<br>collaborator<br>supplier<br>nodeAddress=172.16.13.168:1234<br>trash<br>background<br>oriented<br>treeify<br>commit<br>reflect<br>above<br>Deprecated<br>semaphore<br>as<br>futrue<br>mismatch<br>freon<br>modification<br>use<br>Branch<br>freon<br>actionable<br>multiple<br>ListKeysRequest<br>Block<br>Description<br>Protobuf<br>set<br>anonymous<br>threshold<br>FileEncryptionInfo<br>cleaner<br>Developer<br>chunk<br>checksum<br>track<br>lookup<br>lifecucle<br>attachments<br>failures<br>Pruning<br>Audit<br>post<br>generated<br>bycode<br>Ozone<br>movie<br>rights<br>prototype<br>remove<br>took<br>original<br>declared<br>suggested<br>The<br>fully<br>completed<br>Details<br>NativeCodeLoader:60<br>generify<br>BigDecimal<br>Gets<br>qualified<br>encryption<br>repeated<br>Decom<br>leaving<br>@Command<br>description<br>resolving<br>usage<br>Collaborator<br>criteria<br>usage<br>Module<br>Disable<br>leaving<br>enabled<br>receiving<br>Constructor<br>fully<br>EncryptionInfo<br>completed<br>Scheduled<br>Replication<br>contribute<br>IllegalAc<br>invalid<br>Gets<br>designed<br>deltas<br>original<br>group<br>gank<br>replicated<br>charge<br>programming<br>maven{<br>specification<br>UnsatisfiedDependencyException<br>set<br>library<br>freon<br>snapshots<br>auto<br>author<br>recover<br>wheel<br>Removed<br>delta<br>leaving<br>expiry<br>conditions<br>Checkavailsum<br>rights<br>intern<br>closer<br>List<br>demons<br>Gets<br>xceiver<br>Found<br>location<br>fatal<br>Unchecked<br>Process<br>CurrentlyIn<br>invocation<br>exact<br>untreeify<br>Central<br>What<br>wildcard<br>ContextHandler<br>revea<br>decompiled<br>algorithm<br>cloud<br>Blank<br>renew<br>erase<br>Datagram<br>bind<br>reserved<br>spawned<br>parsing<br>pars<br>cannot<br>multipart<br>peer<br>Broken<br>truncation<br>Pending<br>Caught<br>With<br>vantage<br>cheap<br>mon<br>detection<br>status<br>disabled<br>disables<br>automatically<br>succeed<br>alert<br>redirect<br>grep<br>recursive<br>firefly<br>price<br>straightforward<br>args<br>components<br>ware<br>default<br>rollback<br>switch<br>timestamp<br>info<br>ultima<br>ultimately<br>destination<br>source<br>uploads<br>download<br>overflow<br>stack<br>isBlank<br>revert<br>equal<br>Instruction<br>mutable<br>depiction<br>write<br>down<br>incorrectly<br>Key<br>stars<br>matched<br>caution<br>occupied<br>service<br>client<br>Balancer<br>parcel<br>clouder<br>cloudier<br>context<br>case<br>rawtypes<br>were<br>Multiple<br>tail<br>RpcLite<br>typedef<br>plan<br>fail<br>FEMALE<br>MALE<br>HEAD<br>director<br>assignment<br>acquire<br>multiple<br>STOPPING<br>convert<br>combined<br>aggregation<br>Invalid<br>triggers<br>instance<br>fired<br>checkin<br>cron<br>quartz<br>wrong<br>fragment<br>way<br>inverted<br>enablement<br>Disallow<br>customize<br>lapping<br>Over<br>luckin<br>Trigger<br>base<br>Exhausted<br>Retries<br>metric<br>magic<br>mid<br>SIMPLE<br>previous<br>show<br>show<br>Aggregate<br>all<br>match<br>remind<br>occurred<br>diagrams<br>global<br>instantiate<br>preserve<br>EAGER<br>serial<br>gateway<br>Invocation<br>warn<br>invokeAll<br>discretion<br>flink<br>compute<br>Stream<br>availability<br>Frame<br>exactly-once<br>stract<br>Graph<br>primitive<br>performance<br>concern<br>rank<br>null<br>dereference<br>dead<br>internationalization<br>dodgy<br>bread<br>timezone<br>wding<br>instantf<br>tags<br>unbenannt<br>startseite<br>archiv<br>farewell<br>Manifest<br>Memtable<br>compile<br>warehourse<br>warehours<br>snappy<br>auth<br>stealing<br>fork<br>Schedual<br>call<br>abort<br>Vertex<br>Dispatcher<br>clusters<br>cluster<br>useless<br>Vulnerability<br>processors<br>such<br>assertion<br>sigar<br>Chat<br>Stats<br>Wrapper<br>compare<br>applet<br>Visible<br>Dashboard<br>billion<br>script<br>invite<br>MultiLine<br>majors<br>typo<br>retail<br>press<br>device<br>booting<br>booting<br>associated<br>Fetched<br>drop<br>recommend<br>during<br>injection<br>Sniper<br>hive<br>entire<br>whether<br>made<br>certain<br>calls<br>Readable<br>comments<br>validate<br>ordinal<br>reviation<br>EXECUTE<br>Place<br>Handle<br>Async<br>excluded<br>alias<br>countermand<br>inexecution<br>undo<br>Launching<br>Tracking<br>explain<br>expires<br>clause<br>blockers<br>enclosing<br>each<br>raises<br>tricky<br>Correctly<br>Scheduled<br>Duration<br>AtomicInteger<br>Reentrant<br>blocking<br>instanceof<br>commons<br>practice<br>Correctness<br>Cumulative<br>incremental<br>Coffees<br>Label<br>digits<br>decimal<br>catalog<br>concrete<br>aspect<br>Mirror<br>jan<br>Confidential<br>Prepared<br>credentials<br>collection<br>collection<br>terminated<br>extended<br>DUPLICATION<br>Dependency<br>instantiation<br>nested<br>through<br>expressed<br>Unsatisfied<br>privileges<br>orign<br>tenant<br>waterfall<br>split<br>Capacity<br>Statement<br>extract<br>hundred<br>Noncompliant<br>Forbidden<br>beaver<br>embedded<br>decr<br>TotalPage<br>paging<br>oldkey<br>ren<br>invalid<br>relly<br>flush<br>Sorted<br>subject<br>depth<br>EXPOT<br>thrift<br>explore<br>Appender<br>authorizer<br>prefixLength<br>normalize<br>existence<br>Completion<br>current<br>register<br>struct<br>Owner<br>Modifying<br>Valid<br>Transform<br>category<br>authority<br>Generator<br>Generic<br>processor<br>pick<br>already<br>Expiration<br>preserve<br>in-flight<br>capability<br>issue<br>Autowired<br>browser<br>unauthorized<br>raw<br>parameters<br>actual<br>defined<br>currently<br>requirement<br>argument<br>Oauth<br>Conflict<br>negative<br>heap<br>Common<br>rack<br>paradise<br>hook<br>future<br>coverage<br>the<br>trans<br>generator<br>missing<br>wrong<br>illegal<br>grant<br>comment<br>complete<br>keyboard<br>Minor<br>squid<br>smell<br>Critical<br>incl<br>nesting<br>rule<br>browse<br>search<br>serializer<br>Seek<br>Seeking<br>halt<br>require<br>interceptors<br>inherited<br>club<br>compaction<br>dispatch<br>reactor<br>Sequence<br>replay<br>patch<br>completion<br>forget<br>fire<br>fire<br>transport<br>dismiss<br>undeploy<br>external<br>faster<br>indicates<br>probably<br>Virtual<br>Constant<br>advanced<br>actors<br>abstract<br>repeat<br>revoked<br>progress<br>illegal<br>generation<br>coordination<br>cceeds<br>multi<br>coordinator<br>concat<br>greeting<br>Symbol<br>ident<br>provider<br>Permissions<br>Multicast<br>identifier<br>reassignment<br>Transformation<br>gmall<br>frontend<br>backend<br>notify<br>architecture<br>dubbo<br>submission<br>Distributed<br>most<br>related<br>features<br>performed<br>specific<br>exclude<br>facets<br>disable<br>remoting<br>Disposable<br>Phase<br>destroy<br>Lifecycle<br>yet<br>received<br>decompiler<br>lllegal<br>redial<br>dialed<br>subscriber<br>Foundry<br>Transactional<br>seq<br>Execution<br>exception<br>uncaught<br>Processor<br>Roaming<br>exactly<br>loop<br>samples<br>execution<br>Runner<br>Line<br>command<br>Enable<br>uppercamelcase<br>exchange<br>restTemplate<br>Bearer<br>Secret<br>Access<br>Platform<br>round-robin<br>retention<br>socket<br>sender<br>bound<br>trait<br>trade-off<br>initial<br>rebalancing<br>compacted<br>Usage<br>metrics<br>notification<br>identity<br>domain<br>domin<br>popedom<br>Module<br>token<br>EPHEMERAL<br>disconnect<br>Strict<br>Domain<br>Beeline<br>Efficiency<br>Bootstrap<br>Advanced<br>Mechanism<br>General<br>avro<br>radio<br>origin<br>index<br>run<br>drop<br>daemon<br>Damon<br>result<br>verify<br>constant<br>thyme<br>border<br>pencil<br>NEUTRAL<br>with<br>recall<br>lisence<br>assert<br>crash<br>condition<br>reverse<br>dialect<br>strategy<br>whitelabel<br>stretch<br>Extract<br>Target<br>artifact<br>provided<br>Repl<br>slots<br>assigned<br>epoch<br>notice<br>disconnected<br>afair<br>one<br>establish<br>clear<br>show<br>show<br>word<br>word<br>word<br>word<br>estalished<br>deflate<br>partial<br>Niubility<br>Mapper<br>aliases<br>guanxi<br>note<br>beat<br>Annotation<br>cover<br>seem<br>present<br>statemachine<br>sample<br>actuator<br>Template<br>Expect<br>perform<br>ignore<br>reference<br>under<br>suffix<br>Thymeleaf<br>scope<br>Generate<br>STACKTRACE<br>Communications<br>publish<br>reCall<br>Repository<br>Starters<br>print<br>talk<br>content<br>page<br>coming<br>additivity<br>metastore<br>pagination<br>NumberFormat<br>displayed<br>Number<br>edges<br>items<br>displaye<br>onclick<br>event<br>Compiling<br>undefined<br>Monitor<br>loader<br>SUSPEND<br>Alongside<br>Running<br>Scheduling<br>audit<br>rele<br>Structured<br>destory<br>Option<br>mangagement<br>mangage<br>dynamic<br>administer<br>storage<br>sto<br>processing<br>inside<br>routing<br>indeep<br>action<br>machine<br>installation<br>effective<br>periodically<br>way<br>durable<br>similar<br>capabilities<br>Introduction<br>Prior<br>releases<br>flat<br>serde<br>Released<br>connection<br>flight<br>full<br>replicas<br>insync<br>enable<br>election<br>unclean<br>random<br>compression<br>compress<br>datacommunication<br>communication<br>resolved<br>resol<br>resole<br>adver<br>tick<br>ensemble<br>legacy<br>Position<br>Bounds<br>riven<br>java<br>Unit<br>license<br>Reassignment<br>allowed<br>compiled<br>filtered<br>Detail<br>pairs<br>stable<br>Manual<br>idle<br>resume<br>pause<br>prompt<br>Sqoop<br>failover<br>Argument<br>Illegal<br>compact<br>major<br>mutex<br>volatitle<br>fight<br>interrupt<br>monitor<br>lifecycle<br>exit<br>Security<br>SecurityManager<br>allocates<br>handler<br>row<br>reject<br>take<br>que<br>blocked<br>limit<br>runnable<br>policy<br>task<br>protocol<br>configured<br>Ensure<br>AndEnsureOpen<br>acquireAndEnsureOpen<br>reflection<br>Eagle<br>cite<br>times<br>verdana<br>family<br>font-family<br>PowderBlue<br>center<br>align<br>height<br>width<br>href<br>tiy<br>Rectangle<br>Unnamed<br>Immutable<br>catch<br>Application<br>Bootstrap<br>controlFlag<br>required<br>Authorization<br>secret<br>loss<br>ephemeral<br>tracker<br>foreign<br>connected<br>state<br>Caused<br>See<br>Parameters<br>Specified<br>case<br>module<br>latency<br>fetch-throttle-time<br>sensor<br>Codinator<br>Assigned<br>Revoked<br>Interrupted<br>record<br>prefix<br>issues<br>iss<br>internal<br>Describe<br>DescribeCluster<br>duplicated<br>Utility<br>owned<br>non-owned<br>identified<br>yield<br>volatile<br>volati<br>volatite<br>Replica<br>controller<br>Listener<br>Rebalance<br>Atomic<br>wakeup<br>ConcurrentModification<br>Modification<br>Concurrent<br>inspection<br>Future<br>earliest<br>movingAvg<br>custemor<br>custe<br>maker<br>administering<br>adminis<br>admin<br>training<br>train<br>transaction<br>exactly<br>Deserializer<br>powered<br>powered<br>power<br>powerded<br>subscribe模式差异分析<br>subscribe<br>refer<br>construct<br>PLAINTEXT<br>Security<br>invalid<br>unique<br>Unreachable<br>TRACE<br>available<br>target<br>rollingfile<br>rolli<br>foreground<br>foregr<br>custom<br>remote<br>histories<br>unrelated<br>skip<br>Failures<br>period<br>lease<br>sit<br>instead<br>option<br>Executed<br>idempotence<br>symbol<br>regex<br>medium<br>Importance<br>deletion<br>France<br>precision<br>country<br>customer<br>customercountry<br>Columns<br>scala<br>meta<br>ITEM<br>DEVELOP<br>TRADE<br>applicable<br>WHOLE<br>temp<br>spark<br>Schames<br>timer<br>time<br>matches<br>expected<br>expecte<br>PARTITION<br>exiting<br>established<br>optional<br>MemStore<br>Store<br>platform<br>general<br>generalplatform<br>records<br>contains<br>invoke<br>poll<br>Deal<br>seek<br>parameter<br>usages<br>Field<br>modified<br>Definitions<br>Parse<br>Standard<br>Custom<br>checkpoint<br>secure<br>reduce<br>Guide<br>Reference<br>scheme<br>Received<br>topics<br>Due<br>queue<br>Proposed<br>Current<br>generate<br>region<br>qualifier<br>call<br>unable<br>Get<br>wonderfuk<br>locations<br>produce<br>Extracts<br>admins<br>For<br>The<br>MEMORY<br>BLOOMFILTER<br>ENABLED<br>could<br>Native<br>details<br>HRegionServer<br>backup<br>schema<br>Region<br>Pipeline<br>Transient<br>rejected<br>Push<br>bootstrap<br>remote<br>Building<br>remove<br>credential<br>dereferenced<br>can<br>implies<br>Redirected<br>Redirected<br>failed<br>featurel<br>develop<br>sonar<br>replace<br>Segment<br>hadoop<br>retrieve<br>store<br>separator<br>international<br>component<br>ignored<br>Elastic<br>wired<br>from<br>Loaded<br>via<br>recording<br>attempts<br>JsonIgnore<br>Sample<br>mounted<br>Poller<br>Periodic<br>PeriodicPoller<br>process<br>weather<br>increase<br>segment<br>SEMANTIC<br>SYNTAX<br>Patterns<br>mutate<br>grok<br>decode<br>match<br>plain<br>pipeline<br>Options<br>ensure<br>codec<br>position<br>Pretty<br>Escape<br>Escaping<br>disable<br>contributions<br>Corporation<br>concurrent<br>function<br>scan<br>common<br>Excute<br>Interval<br>cache<br>accessors<br>staged<br>Agent<br>snapshot<br>define<br>borrow<br>invalid<br>incorrect<br>inactive<br>Secondary<br>Column<br>salary<br>custom<br>dependency<br>resolve<br>collector<br>flow<br>Job<br>shuffle<br>Record<br>You<br>access<br>Minion<br>buffer<br>millis<br>intervalceiling<br>interval<br>pacemaker<br>pacemaker<br>deprecation<br>slow<br>contributors<br>wonderful<br>leadership<br>shard<br>increasing<br>consider<br>low<br>likely<br>process<br>descriptors<br>interests<br>Megacorp<br>sense<br>nstall<br>Permission<br>elastic<br>access<br>fetch<br>shape<br>Iterable<br>iterator<br>pervious<br>item<br>security<br>blobstore<br>implementation<br>ssl.secure.random.implementation<br>remark<br>sheet<br>reblance<br>mooc<br>Invalid<br>Automatic<br>receive<br>recommended<br>pool<br>Invalid<br>moment<br>Unable<br>stat<br>archive<br>sort<br>originState<br>broker<br>advertised<br>brokers<br>available<br>factor<br>replication<br>regular<br>advertise<br>essential<br>explanation<br>thnx<br>to<br>notty<br>difference<br>intersect<br>union<br>uniq<br>minify<br>wiki<br>native<br>ether<br>netmask<br>bcast<br>broadcast<br>fatal<br>field<br>Cell<br>Document<br>Information<br>Summary<br>developerworks<br>Exiting<br>Skipping<br>Fall<br>Security<br>too<br>Definition<br>ship<br>images<br>launch<br>Core<br>Full<br>Deployer<br>Extras<br>Embedded<br>latest<br>mirror<br>registry<br>Redirecting<br>batch<br>Handler<br>Unspecified<br>container<br>persist<br>Constraints<br>parse<br>feature<br>eature<br>offers<br>driver<br>specify<br>Function<br>UserWarning<br>staging<br>stag<br>Fetch<br>AttributeError<br>Installing<br>Press<br>Keep<br>pull<br>push<br>Microsoft<br>elements<br>upgrade<br>upgread<br>referer<br>request<br>alien<br>fleet<br>snip<br>bottom<br>rect<br>screen<br>blit<br>fill<br>exporrer<br>attribute<br>AttributeError<br>usage<br>InsecureRequestWarning<br>tickets<br>TypeError:<br>stations<br>perf<br>hsperf<br>future<br>SyntaxError:<br>based<br>executable<br>Ticket<br>libpng<br>libpng<br>libpng<br>display<br>caption<br>ValueError<br>Redirection<br>image<br>range<br>font<br>IOError<br>site<br>UnicodeEncodeError<br>SIGTERM<br>RECEIVED<br>proceed<br>comparison<br>permission<br>manual<br>syntax<br>conditiona<br>CASCADE<br>RESTRICT<br>alter<br>modify<br>TEMPORARY<br>Expressions<br>primary<br>distinct<br>enterprise<br>Component<br>release<br>assign<br>Call<br>sqrate<br>rate<br>summary<br>Data<br>near<br>BINARY<br>PRIVILEGES<br>Column<br>duplicate<br>dump<br>column<br>cursor<br>FOREIGN<br>REFERENCES<br>CONSTRAINT<br>PRIMARY<br>structure<br>formatter<br>cast<br>detected<br>bracket<br>statement<br>layout<br>neutral<br>rolling<br>level<br>expression<br>evaluator<br>deny<br>Mismatch<br>Match<br>append<br>pattern<br>encoder<br>Policy<br>triggering<br>triggeringPolicy<br>appender<br>configuration<br>Judge<br>transform<br>Unreachable<br>persistent<br>constrains<br>SERVLET<br>monit<br>stage<br>artifacts<br>encode<br>submit<br>except<br>report<br>operate<br>Operation<br>last<br>interva<br>Wipe<br>query<br>dumps<br>executor<br>Configuration<br>Reliability<br>Bolts<br>Spouts<br>Streams<br>topology<br>nimbus<br>supervisor<br>rebalance<br>deploy<br>Terminal<br>Operator<br>Container<br>External<br>Volume<br>Persistent<br>Element<br>Response<br>Queue<br>Strategy<br>Upgrade<br>Failure<br>deprecated<br>transactional<br>transactiona<br>template<br>Accept<br>Content<br>recent</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;contents&lt;br&gt;prevVolume&lt;br&gt;Sub&lt;br&gt;Invalid&lt;br&gt;calculate&lt;br&gt;Failed&lt;br&gt;claas&lt;br&gt;Prefix&lt;br&gt;Index&lt;br&gt;lite&lt;/p&gt;
    
    </summary>
    
    
      <category term="程序员英语" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之职责链模式</title>
    <link href="http://yoursite.com/2020/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/22/设计模式之职责链模式/</id>
    <published>2020-05-22T11:57:10.000Z</published>
    <updated>2020-05-21T07:45:00.844Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="http://yoursite.com/2020/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/21/设计模式之工厂模式/</id>
    <published>2020-05-21T11:57:10.000Z</published>
    <updated>2020-05-20T01:48:17.432Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂模式" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="http://yoursite.com/2020/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/21/设计模式之组合模式/</id>
    <published>2020-05-21T11:57:10.000Z</published>
    <updated>2020-05-21T07:42:00.180Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="http://yoursite.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/20/设计模式之观察者模式/</id>
    <published>2020-05-20T11:57:10.000Z</published>
    <updated>2020-05-21T07:40:11.459Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="观察者模式" scheme="http://yoursite.com/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://yoursite.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/20/设计模式之适配器模式/</id>
    <published>2020-05-20T11:57:10.000Z</published>
    <updated>2020-05-27T03:49:01.798Z</updated>
    
    <content type="html"><![CDATA[<p>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://yoursite.com/2020/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/19/设计模式之单例模式/</id>
    <published>2020-05-19T11:57:10.000Z</published>
    <updated>2020-05-19T01:32:47.981Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>谷歌protobuf详解</title>
    <link href="http://yoursite.com/2020/05/18/%E8%B0%B7%E6%AD%8Cprotobuf%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/05/18/谷歌protobuf详解/</id>
    <published>2020-05-18T11:57:10.000Z</published>
    <updated>2020-05-21T07:46:31.537Z</updated>
    
    <content type="html"><![CDATA[<p>Protobuf 实际是一套类似 Json 或者 XML 的数据传输格式和规范，用于不同应用或进程之间进行通信时使用。通信时所传递的信息是通过 Protobuf 定义的 message 数据结构进行打包，然后编译成二进制的码流再进行传输或者存储。</p><p>相比较而言，Protobuf 有如下优点：</p><ul><li>足够简单</li><li>序列化后体积很小：消息大小只需要 XML 的 1/10 ~ 1/3</li><li>解析速度快：解析速度比 XML 快 20 ~ 100 倍</li><li>多语言支持</li><li>更好的兼容性，Protobuf 设计的一个原则就是要能够很好的支持向下或向上兼容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Protobuf 实际是一套类似 Json 或者 XML 的数据传输格式和规范，用于不同应用或进程之间进行通信时使用。通信时所传递的信息是通过 Protobuf 定义的 message 数据结构进行打包，然后编译成二进制的码流再进行传输或者存储。&lt;/p&gt;
&lt;p&gt;相比较而言，
      
    
    </summary>
    
    
      <category term="序列化数据、协议" scheme="http://yoursite.com/categories/%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E3%80%81%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="协议" scheme="http://yoursite.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>mac 使用 brew update 无反应，更新慢解决办法</title>
    <link href="http://yoursite.com/2020/05/15/mac%20%E4%BD%BF%E7%94%A8%20brew%20update%20%E6%97%A0%E5%8F%8D%E5%BA%94%EF%BC%8C%E6%9B%B4%E6%96%B0%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2020/05/15/mac 使用 brew update 无反应，更新慢解决办法/</id>
    <published>2020-05-15T11:57:10.000Z</published>
    <updated>2020-07-03T10:02:35.614Z</updated>
    
    <content type="html"><![CDATA[<p>每次 brew update 或 brew install xxx 都需要等很长时间；</p><h3 id="使用中科大的镜像替换默认源"><a href="#使用中科大的镜像替换默认源" class="headerlink" title="使用中科大的镜像替换默认源"></a>使用中科大的镜像替换默认源</h3><ul><li>第一步，替换 brew.git<h4 id="进入brew主目录"><a href="#进入brew主目录" class="headerlink" title="进入brew主目录"></a>进入brew主目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><ul><li>第二步：替换 homebrew-core.git<h4 id="进入brew主目录-1"><a href="#进入brew主目录-1" class="headerlink" title="进入brew主目录"></a>进入brew主目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更换镜像-1"><a href="#更换镜像-1" class="headerlink" title="更换镜像"></a>更换镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><ul><li>最后使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure></li></ul><h3 id="几个镜像"><a href="#几个镜像" class="headerlink" title="几个镜像:"></a>几个镜像:</h3><ul><li><a href="https://git.coding.net/homebrew/homebrew.git" target="_blank" rel="noopener">https://git.coding.net/homebrew/homebrew.git</a> - Coding</li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</a> - 清华</li><li><a href="https://mirrors.ustc.edu.cn/brew.git" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/brew.git</a> - 中科大</li></ul><ul><li>取消自动更新<br>在.bash_profile配置文件中添加下面的配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># brew 不自动更新</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次 brew update 或 brew install xxx 都需要等很长时间；&lt;/p&gt;
&lt;h3 id=&quot;使用中科大的镜像替换默认源&quot;&gt;&lt;a href=&quot;#使用中科大的镜像替换默认源&quot; class=&quot;headerlink&quot; title=&quot;使用中科大的镜像替换默认源&quot;&gt;
      
    
    </summary>
    
    
      <category term="Mac、brew更新" scheme="http://yoursite.com/categories/Mac%E3%80%81brew%E6%9B%B4%E6%96%B0/"/>
    
    
      <category term="软件安装" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>python3.8 不能使用 requests 问题</title>
    <link href="http://yoursite.com/2020/05/14/python3.7%20%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%20requests%20%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/05/14/python3.7 不能使用 requests 问题/</id>
    <published>2020-05-14T11:57:10.000Z</published>
    <updated>2020-05-15T07:14:23.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码会提示"><a href="#代码会提示" class="headerlink" title="代码会提示"></a>代码会提示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &apos;requests&apos;</span><br></pre></td></tr></table></figure><h4 id="问题：因为你的-python-还未安装-requests-库，需要通过-pip-安装。"><a href="#问题：因为你的-python-还未安装-requests-库，需要通过-pip-安装。" class="headerlink" title="问题：因为你的 python 还未安装 requests 库，需要通过 pip 安装。"></a>问题：因为你的 python 还未安装 requests 库，需要通过 pip 安装。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">luxiaofeng@yuezpdeMacBook-Pro~ pip3 install requests</span><br><span class="line">Collecting requests</span><br><span class="line">  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000021F85E8A760</span><br><span class="line">&gt;, &apos;Connection to pypi.org timed out. (connect timeout=15)&apos;)&apos;: /simple/requests/</span><br><span class="line">  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000021F85E8A340</span><br><span class="line">&gt;, &apos;Connection to pypi.org timed out. (connect timeout=15)&apos;)&apos;: /simple/requests/</span><br><span class="line">  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000021F85EACDC0</span><br><span class="line">&gt;, &apos;Connection to pypi.org timed out. (connect timeout=15)&apos;)&apos;: /simple/requests/</span><br><span class="line">  Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000021F85EACAC0</span><br><span class="line">&gt;, &apos;Connection to pypi.org timed out. (connect timeout=15)&apos;)&apos;: /simple/requests/</span><br><span class="line">  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &apos;ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000021F85EAC610</span><br><span class="line">&gt;, &apos;Connection to pypi.org timed out. (connect timeout=15)&apos;)&apos;: /simple/requests/</span><br><span class="line">  Could not find a version that satisfies the requirement requests (from versions: )</span><br><span class="line">No matching distribution found for requests</span><br></pre></td></tr></table></figure><p>从执行的过程来看，请求一直处于超时。这是由于国内很多情况下，无法正常去下载国外服务器资源导致。</p><h4 id="解决方法：使用国内镜像，常用的有镜像有"><a href="#解决方法：使用国内镜像，常用的有镜像有" class="headerlink" title="解决方法：使用国内镜像，常用的有镜像有"></a>解决方法：使用国内镜像，常用的有镜像有</h4><ul><li>清华大学镜像：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>阿里云：<a href="https://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">https://mirrors.aliyun.com/pypi/simple/</a></li><li>中科大镜像：<a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>中科大镜像 2：<a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><h4 id="使用镜像的安装范式为："><a href="#使用镜像的安装范式为：" class="headerlink" title="使用镜像的安装范式为："></a>使用镜像的安装范式为：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install xxxx -i http://… 或者 pip install  -i https://… xxxx。</span><br><span class="line"># 示例如下：</span><br><span class="line">pip install requests -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h4 id="注意：如果安装过程中提示需要升级-pip"><a href="#注意：如果安装过程中提示需要升级-pip" class="headerlink" title="注意：如果安装过程中提示需要升级 pip"></a>注意：如果安装过程中提示需要升级 pip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You should consider upgrading via the &apos;python -m pip install --upgrade pip&apos; command.</span><br><span class="line"># 解决命令</span><br><span class="line">python -m pip install --upgrade pip -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码会提示&quot;&gt;&lt;a href=&quot;#代码会提示&quot; class=&quot;headerlink&quot; title=&quot;代码会提示&quot;&gt;&lt;/a&gt;代码会提示&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="python学习" scheme="http://yoursite.com/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="包安装" scheme="http://yoursite.com/tags/%E5%8C%85%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>PostConstruct注解</title>
    <link href="http://yoursite.com/2020/05/13/@PostConstruct%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/05/13/@PostConstruct注解/</id>
    <published>2020-05-13T11:57:10.000Z</published>
    <updated>2020-05-13T09:49:12.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PostConstruct-的-API-使用说明"><a href="#PostConstruct-的-API-使用说明" class="headerlink" title="@PostConstruct 的 API 使用说明"></a>@PostConstruct 的 API 使用说明</h3><blockquote><p>PostConstruct 注释用于在依赖关系注入完成之后需要执行的方法上，以执行任何初始化。此方法必须在将类放入服务之前调用。支持依赖关系注入的所有类都必须支持此注释。即使类没有请求注入任何资源，用 PostConstruct 注释的方法也必须被调用。只有一个方法可以用此注释进行注释。应用 PostConstruct 注释的方法必须遵守以下所有标准：该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义，在这种情况下它将带有一个 InvocationContext 对象 ；该方法的返回类型必须为 void；该方法不得抛出已检查异常；应用 PostConstruct 的方法可以是 public、protected、package private 或 private；除了应用程序客户端之外，该方法不能是 static；该方法可以是 final；如果该方法抛出未检查异常，那么不得将类放入服务中，除非是能够处理异常并可从中恢复的 EJB。</p></blockquote><a id="more"></a><p><strong><em>总结为一下几点：</em></strong></p><ul><li>只有一个方法可以使用此注释进行注解；</li><li>被注解方法不得有任何参数；</li><li>被注解方法返回值为 void；</li><li>被注解方法不得抛出已检查异常；</li><li>被注解方法需是非静态方法；</li><li>此方法只会被执行一次；</li></ul><p>在具体 Bean 的实例化过程中，@PostConstruct 注释的方法，会在构造方法之后，init 方法之前进行调用。</p><ul><li><p>UserService 方法（提供缓存数据）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    public List&lt;String&gt; getUser()&#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;张三&quot;);</span><br><span class="line">        list.add(&quot;李四&quot;);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BusinessService 方法，通过 @PostConstruct 调用 UserService：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class BusinessService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    private List&lt;String&gt; list = null;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造方法执行之后，调用此方法</span><br><span class="line">     */</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;@PostConstruct方法被调用&quot;);</span><br><span class="line">        // 实例化类之前缓存获得用户信息</span><br><span class="line">        List&lt;String&gt; list = userService.getUser();</span><br><span class="line">        this.list = list;</span><br><span class="line">        if(list != null &amp;&amp; !list.isEmpty())&#123;</span><br><span class="line">            for(String user : list)&#123;</span><br><span class="line">                System.out.println(&quot;用户：&quot; + user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BusinessService()&#123;</span><br><span class="line">        System.out.println(&quot;构造方法被调用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;String&gt; getList() &#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;String&gt; list) &#123;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法被调用</span><br><span class="line">@PostConstruct方法被调用</span><br><span class="line">用户：张三</span><br><span class="line">用户：李四</span><br></pre></td></tr></table></figure></li></ul><p>[参考链接]<a href="https://blog.csdn.net/wo541075754/article/details/52174900" target="_blank" rel="noopener">https://blog.csdn.net/wo541075754/article/details/52174900</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PostConstruct-的-API-使用说明&quot;&gt;&lt;a href=&quot;#PostConstruct-的-API-使用说明&quot; class=&quot;headerlink&quot; title=&quot;@PostConstruct 的 API 使用说明&quot;&gt;&lt;/a&gt;@PostConstruct 的 API 使用说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PostConstruct 注释用于在依赖关系注入完成之后需要执行的方法上，以执行任何初始化。此方法必须在将类放入服务之前调用。支持依赖关系注入的所有类都必须支持此注释。即使类没有请求注入任何资源，用 PostConstruct 注释的方法也必须被调用。只有一个方法可以用此注释进行注释。应用 PostConstruct 注释的方法必须遵守以下所有标准：该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义，在这种情况下它将带有一个 InvocationContext 对象 ；该方法的返回类型必须为 void；该方法不得抛出已检查异常；应用 PostConstruct 的方法可以是 public、protected、package private 或 private；除了应用程序客户端之外，该方法不能是 static；该方法可以是 final；如果该方法抛出未检查异常，那么不得将类放入服务中，除非是能够处理异常并可从中恢复的 EJB。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java注解" scheme="http://yoursite.com/tags/Java%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="http://yoursite.com/2020/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/05/08/设计模式之代理模式/</id>
    <published>2020-05-08T11:57:10.000Z</published>
    <updated>2020-05-21T07:40:00.358Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性三</title>
    <link href="http://yoursite.com/2020/05/07/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%89/"/>
    <id>http://yoursite.com/2020/05/07/Java8新特性三/</id>
    <published>2020-05-07T11:57:10.000Z</published>
    <updated>2020-05-07T02:18:44.177Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java、新特性" scheme="http://yoursite.com/tags/Java%E3%80%81%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
</feed>
